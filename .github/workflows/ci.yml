name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  fmt:
    name: Format and Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true

    - name: Install dependencies
      run: make install

    - name: Run linter and formatter
      run: make fix

  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true

    - name: Install dependencies
      run: make install

    - name: Run tests
      run: make test

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.22'
        cache: true

    - name: Install dependencies
      run: make install

    - name: Get version
      id: get_version
      run: echo "VERSION=v$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

    - name: Build binary
      run: go build -ldflags "-X main.Version=${{ steps.get_version.outputs.VERSION }}" -o chechekule

    - name: Prepare artifact (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        if [ "${{ matrix.os }}" = "macos-latest" ]; then
          tar -czf chechekule-${{ steps.get_version.outputs.VERSION }}-darwin-amd64.tar.gz chechekule
        else
          tar -czf chechekule-${{ steps.get_version.outputs.VERSION }}-linux-amd64.tar.gz chechekule
        fi

    - name: Prepare artifact (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: |
        Compress-Archive -Path chechekule -DestinationPath chechekule-${{ steps.get_version.outputs.VERSION }}-windows-amd64.zip

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chechekule-${{ matrix.os }}
        path: |
          chechekule-${{ steps.get_version.outputs.VERSION }}-*.tar.gz
          chechekule-${{ steps.get_version.outputs.VERSION }}-*.zip
        if-no-files-found: error

  release:
    name: Create Release
    needs: [fmt, test, build]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts

    - name: Create Release
      run: |
        VERSION=$(ls artifacts/chechekule-ubuntu-latest/chechekule-*.tar.gz | head -n 1 | grep -o 'v[0-9]*')
        if [ -z "$VERSION" ]; then
          echo "Error: Could not extract version from artifacts"
          exit 1
        fi
        
        gh release create "$VERSION" \
          --title "Release $VERSION" \
          --notes "Release $VERSION" \
          artifacts/chechekule-ubuntu-latest/chechekule-*.tar.gz \
          artifacts/chechekule-macos-latest/chechekule-*.tar.gz \
          artifacts/chechekule-windows-latest/chechekule-*.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
